AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This CF template creates a VPC infrastructure for a multi-AZ, multi-tier
  deployment of TIBCO Spotfire Data Science 6.4 on AWS. It deploys a VPC with
  bastions. **WARNING** This template creates EC2 instances and related
  resources. You will be billed for the AWS resources used if you create a stack
  from this template.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - VPCID
      - PrivateSubnet1ID
      - PrivateSubnet2ID
      - PublicSubnet1ID
      - PublicSubnet2ID
      - AdminConsoleAccessCIDR
      - ClientAppAccessCIDR
    - Label:
        default: Bastion Configuration
      Parameters:
      - KeyPairName
      - BastionSecurityGroupID
    - Label: TIBCO Spotfire DS Node 1 Configuration
      Parameters:
      - TSDSowner
      - TSDSInstanceName
      - TSDSInstanceType
    ParameterLabels:
      AdminConsoleAccessCIDR:
        default: Allowed Admin Web Console External Access CIDR
      BastionSecurityGroupID:
        default: Bastion Security Group ID
      ClientAppAccessCIDR:
        default: Allowed Client Application External Access CIDR
      KeyPairName:
        default: SSH Key Name
      TSDSowner:
        default: TSDS Instance Owner
      TSDSInstanceName:
        default: TSDS Instance Name
      TSDSInstanceType:
        default: TSDS Instance Type
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      VPCID:
        default: VPC ID
Parameters:
  AdminConsoleAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the IBM MQ Web Console
      via the ELB. We recommend that you set this value to a trusted IP range.
    Type: String
  BastionSecurityGroupID:
    Description: ID of the bastion host security group to enable SSH connections (e.g.,
      sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
  ClientAppAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to allow access for IBM MQ Client
      Applications. We recommend that you set this value to a trusted IP range.
    Type: String
  TSDSInstanceName:
    Description: Name for the TSDS instance that is deployed to EC2
    Type: String
    Default: tsds
  TSDSInstanceType:
    AllowedValues:
      - m5.2xlarge
      - m5.4xlarge
    ConstraintDescription: Must contain valid instance type
    Default: m5.2xlarge
    Description: Type of EC2 instance for TIBCO Spotfire DS 6.4 AMI
    Type: String
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  TSDSowner:
    Description: Set Owner tag for the IBM MQ instance
    Default: tsds-owner
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the TSDS instances
      (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the TSDS instances
      (e.g., subnet-b1f432cd)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1ID:
    Description: ID of public subnet 1 in Availability Zone 1 for the ELB load balancer
      (e.g., subnet-9bc642ac)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: ID of public subnet 2 in Availability Zone 2 for the ELB load balancer
      (e.g., subnet-e3246d8e)
    Type: AWS::EC2::Subnet::Id
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
Rules:
  EFSSupportedRegionRule:
    Assertions:
    - Assert:
        Fn::Contains:
        - - us-east-1
          - us-east-2
          - us-west-2
          - eu-west-1
          - ap-southeast-2
        - !Ref AWS::Region
      AssertDescription: This Quick Start utilizes Amazon EFS which is only available
        in the US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland)
        and Asia Pacific (Sydney) regions. Please launch the stack in one of these
        regions
  SubnetsInVPC:
    Assertions:
    - Assert:
        Fn::EachMemberIn:
        - Fn::ValueOfAll:
          - AWS::EC2::Subnet::Id
          - VpcId
        - Fn::RefAll: AWS::EC2::VPC::Id
      AssertDescription: All subnets must in the VPC
Mappings:
  AWSRegionAMI:
    us-west-1:
      '64': ami-0509ca366708b4622
    us-east-1:
      '64': ami-0e057d4facc96b5d8
Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
  InstanceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ReportHealthPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: autoscaling:SetInstanceHealth
          Resource:
            Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AutoScalingGroup}
      Roles:
      - !Ref InstanceRole
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole
  DatabaseSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
  TSDSDBCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier: tsdsdbcluster
      DBClusterParameterGroupName: default.aurora-postgresql9.6
      DatabaseName: postgres_chorus
      MasterUsername: postgres_chorus
      MasterUserPassword: tibcoAlpine!23
      Port: 8543
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VpcSecurityGroupIds:
        - !Ref MountTargetSecurityGroup
  TSDSDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier: !Ref TSDSDBCluster
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBInstanceClass: db.r4.large
  TSDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable SSH access via port 22, and access to 8080 via ELB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        SourceSecurityGroupId: !Ref BastionSecurityGroupID
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        SourceSecurityGroupId: !Ref TSDSELBSecurityGroup
  TSDSELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable access via port 8080
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: !Ref ClientAppAccessCIDR
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        SourceSecurityGroupId: !Ref TSDSSecurityGroup
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap
        - AWSRegionAMI
        - !Ref 'AWS::Region'
        - '64'
      InstanceType: !Ref TSDSInstanceType
      KeyName: !Ref KeyPairName
      EbsOptimized: true
      SecurityGroups:
      - !Ref TSDSSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            # Script to configure Node 1 of TSDS 6.4
            # Create directory to mount EFS DIR
            mkdir /tsds_efs

            # Mount EFS and add mount to fstab to restore on reboot
            mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${TSDSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /tsds_efs
            echo "${TSDSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /tsds_efs     nfs4    defaults,_netdev        0       0" >> /etc/fstab

            # Create shared directory structure
            mkdir --parents /tsds_efs/local/
            mkdir --parents /tsds_efs/data/tsds/

            # Change ownership to tsds
            chown tsds:tsds -R /tsds_efs

            # Copy install DIR to EFS Shared DIR
            su -c "cp -a /usr/local/tsds/ /tsds_efs/local/" - tsds
            su -c "cp -a /data/tsds/public/ /tsds_efs/data/tsds/" - tsds
            su -c "cp -a /data/tsds/system/ /tsds_efs/data/tsds/" - tsds

            # Rename old install DIR and replace with soft link to new EFS DIR
            mv /usr/local/tsds /usr/local/tsds_old
            mv /data/tsds/public /data/tsds/public_old
            mv /data/tsds/system /data/tsds/system_old
            ln -s /tsds_efs/local/tsds /usr/local/tsds
            ln -s /tsds_efs/data/tsds/public /data/tsds/public
            ln -s /tsds_efs/data/tsds/system /data/tsds/system

            # start postgres service to perform backup
            su -c "source /usr/local/tsds/chorus_path.sh && /usr/local/tsds/chorus_control.sh start postgres" - tsds

            # backup postgres and shutdown postgres
            su -c "source /usr/local/tsds/chorus_path.sh && /usr/local/tsds/current/postgres/bin/pg_dump -Fc -p 8543 -U postgres_chorus chorus > /tmp/chorusdb.dump" - tsds
            su -c "source /usr/local/tsds/chorus_path.sh && /usr/local/tsds/chorus_control.sh stop postgres" - tsds

            #Backup database.yml
            su -c "mv /usr/local/tsds/shared/database.yml /usr/local/tsds/shared/database.yml.old" - tsds
            su -c "touch /usr/local/tsds/shared/database.yml" - tsds
            su -c "chmod 644 /usr/local/tsds/shared/database.yml"

            # Reconfigure database.yml to point to Amazon RDS
            cat >> /usr/local/tsds/shared/database.yml <<EOF
            production:
              adapter: jdbcpostgresql
              encoding: unicode
              database: chorus
              username: postgres_chorus
              password: tibcoAlpine!23
              min_messages: warning
              host: ${TSDSDBCluster.Endpoint.Address}
              port: '8543'
              pool: 40
            EOF

            #update .pgpass
            su -c "mv /usr/local/tsds/.pgpass /usr/local/tsds/.pgpass_old" - tsds
            su -c "touch /usr/local/tsds/.pgpass" - tsds
            echo "*:*:*:postgres_chorus:tibcoAlpine!23" >> /usr/local/tsds/.pgpass
            su -c "chmod 400 /usr/local/tsds/.pgpass" - tsds

            # restore postgres
            su -c "/usr/local/tsds/current/postgres/bin/createdb chorus -p 8543 -h ${TSDSDBCluster.Endpoint.Address} -U postgres_chorus" - tsds
            su -c "source /usr/local/tsds/chorus_path.sh && /usr/local/tsds/current/postgres/bin/pg_restore -d chorus -p 8543 -h ${TSDSDBCluster.Endpoint.Address} -U postgres_chorus /tmp/chorusdb.dump"
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - MountTarget1
    - MountTarget2
    Properties:
      VPCZoneIdentifier:
      - !Ref PrivateSubnet1ID
      - !Ref PrivateSubnet2ID
      LoadBalancerNames:
      - !Ref LoadBalancer
      HealthCheckType: EC2
      HealthCheckGracePeriod: 90
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      Tags:
      - Key: Name
        Value: !Ref TSDSInstanceName
        PropagateAtLaunch: 'true'
      - Key: Owner
        Value: !Ref TSDSowner
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '0'
        MaxBatchSize: '1'
  TSDSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
      - Key: Name
        Value: TSDSFileSystem
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref TSDSFileSystem
      SubnetId: !Ref PrivateSubnet1ID
      SecurityGroups:
      - !Ref MountTargetSecurityGroup
  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref TSDSFileSystem
      SubnetId: !Ref PrivateSubnet2ID
      SecurityGroups:
      - !Ref MountTargetSecurityGroup
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      LoadBalancerName:
        Fn::Sub: tsds-elb-${AWS::AccountId}
      Listeners:
      - InstancePort: '8080'
        InstanceProtocol: TCP
        LoadBalancerPort: '8080'
        Protocol: TCP
      - InstancePort: '22'
        InstanceProtocol: TCP
        LoadBalancerPort: '22'
        Protocol: TCP
      SecurityGroups:
      - !Ref TSDSELBSecurityGroup
      Subnets:
      - !Ref PublicSubnet1ID
      - !Ref PublicSubnet2ID
Outputs:
  TSDSRestApiURL:
    Description: URL for Elastic Load Balancer to connect to TSDS 6.4
    Value:
      Fn::Sub: https://${LoadBalancer.DNSName}:8080
